// $Id: $
// File name:   tb_i2c_slave.sv
// Created:     2/27/2017
// Author:      Gabriel Burke
// Lab Section: 337-02
// Version:     1.0  Initial Design Entry
// Description: TB for slave block`timescale 1ns / 100ps
`timescale 1ns / 100ps
module tb_i2c_slave
();
	// Define local parameters used by the test bench
	localparam CLK_PERIOD = 2.5;
	localparam SCL_CLK_PERIOD = 25;
	localparam NUM_CASES = 4;
	localparam TEST_DELAY=10;
	// Declare Design Under Test (DUT) portmap signals
	reg tb_clk;

	// Clock generation block
	always
	begin
		tb_clk = 1'b0;
		#(CLK_PERIOD/2.0);
		tb_clk = 1'b1;
		#(CLK_PERIOD/2.0);
	end

	
	logic tb_n_rst;			//in
	logic tb_scl;			//in
	logic tb_sda_in;		//in
	logic tb_write_enable; 		//in	
	logic [7:0] tb_write_data;	//in
	logic tb_sda_out;		//out
	logic tb_fifo_empty;		//out
	logic tb_fifo_full;		//out
	int tb_test_case;
	logic [1:0] tb_scl_read;
	logic [1:0] tb_scl_write;
	logic [1:0] tb_sda_read;
	logic [1:0] tb_sda_write;
	logic tb_m_scl_out;
	logic tb_m_scl_in;
	logic tb_m_sda_in;
	logic tb_m_sda_out;
	logic [7:0] transmittedValue;
	assign {tb_scl,tb_m_scl_in} = tb_scl_read;
	assign tb_scl_write = {1'bZ,tb_m_scl_out};
	assign  {tb_sda_in,tb_m_sda_in} = tb_sda_read;
	assign tb_sda_write = {tb_sda_out,tb_m_sda_out}; 
	
	always
	begin
		tb_m_scl_out = 1'b0;
		#(SCL_CLK_PERIOD/2.0);
		tb_m_scl_out = 1'b1;
		#(SCL_CLK_PERIOD/2.0);
	end


	i2c_slave DUT(.clk(tb_clk),.n_rst(tb_n_rst),.scl(tb_scl),.sda_in(tb_sda_in),.write_enable(tb_write_enable),.write_data(tb_write_data),.sda_out(tb_sda_out),.fifo_empty(tb_fifo_empty),.fifo_full(tb_fifo_full));
	i2c_bus BUS(.scl_read(tb_scl_read),.scl_write(tb_scl_write),.sda_read(tb_sda_read),.sda_write(tb_sda_write));
	
	initial
	begin
		tb_n_rst = 0;
		tb_test_case = 0;
		tb_write_enable = 0;
		tb_write_data = 0;
		tb_m_sda_out = 1;
		@(negedge tb_clk);
		tb_n_rst = 1;
		@(negedge tb_clk);
//Test Case 1
		tb_test_case += 1;
		@(posedge tb_m_scl_out);
		#(CLK_PERIOD)
		tb_m_sda_out = 0;
		tb_write_data = 8'b10101010;
		tb_write_enable = 1;
		#(CLK_PERIOD)
		tb_write_enable = 0;

		tb_m_sda_out = 1;
		@(posedge tb_m_scl_out);
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 1;
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 1;
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 1;
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 0;
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 0;
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 0;
		@(posedge tb_m_scl_out);
		tb_m_sda_out = 1; //RW mode of 1
		@(posedge tb_m_scl_out);                           
		

		@(negedge tb_m_scl_out);
		
		if(tb_m_sda_in == 0)
		begin
			$info("Correct value for test case %d!", tb_test_case);
		end
		else
		begin
			$error("Incorrect value for test case %d!", tb_test_case);
		end

//Test Case 2
		tb_test_case += 1;
		@(posedge tb_m_scl_out);
		transmittedValue[7] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[6] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[5] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[4] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[3] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[2] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[1] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		transmittedValue[0] = tb_m_sda_in; 
		@(posedge tb_m_scl_out);
		if(transmittedValue == 8'b10101010)
		begin
			$info("Correct value for test case %d!", tb_test_case);
		end
		else
		begin
			$error("Incorrect value for test case %d!", tb_test_case);
		end

		
		
	end
	
endmodule
